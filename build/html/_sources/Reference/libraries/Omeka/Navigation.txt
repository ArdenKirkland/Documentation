----------------
Omeka_Navigation
----------------

.. php:class:: Omeka_Navigation

    Package: :doc:`/Reference/packages/Navigation/index`

    Customized subclass of Zend Framework's Zend_Navigation class.

    .. php:method:: __construct(array|Zend_Config $pages)
    
        Creates a new navigation container
        
        :param array|Zend_Config $pages:    [optional] pages to add

    .. php:method:: saveAsOption(String $optionName)
    
        Saves the navigation in the global options table.
        
        :param String $optionName:    The name of the option

    .. php:method:: loadAsOption(String $optionName)
    
        Loads the navigation from the global options table
        
        :param String $optionName:    The name of the option

    .. php:method:: addPage($page)
    
        Adds a page to the container.  If a page does not have a valid id, it will give it one.
        and is an instance of Zend_Navigation_Page_Mvc or Omeka_Navigation_Page_Uri.
        If a page already has another page with the same uid then it will not add the page.
        
        This method will inject the container as the given page's parent bycalling {@link
        Zend_Navigation_Page::setParent()}.
        
        :param unknown $page: 
        :returns: Zend_Navigation_Container                     fluent interface, returns self

    .. php:method:: addPagesFromFilter(String $filterName = public_navigation_main)
    
        Adds pages generated by Omeka plugins and other contributors via a filter (e.x. 'public_navigation_main').
        The filter should provide an array pages like they are added to Zend_Navigation_Container::addPages
        However, the page types should only be one of the following types:
        Omeka_Navigation_Page_Uri or Zend_Navigation_Page_Mvc.  
        If the associated uri of any page is invalid, it will not add that page to the navigation. 
        Also, it removes expired pages from formerly active plugins and other former handlers of the filter.
        
        :param String $filterName:    The name of the filter

    .. php:method:: getPageByUid(String $pageUid)
    
        Returns the navigation page associated with uid.  If not page is associated, then it returns null.
        
        :param String $pageUid: The uid of the page
        :returns: Omeka_Zend_Navigation_Page_Uri|Zend_Navigation_Page_Mvc|null

    .. php:method:: createPageUid(String $href)
    
        Returns the unique id for the page, which can be used to determine whether it can be added to the navigation
        
        :param String $href: The href of the page.
        :returns: String

    .. php:method:: removePageRecursive(Zend_Navigation_Page $page)
    
        Recursively removes the given page from the navigation, including all subpages
        
        :param Zend_Navigation_Page $page: 
        :returns: boolean Whether the page was removed

    .. php:method:: getNavigationOptionValueForInstall(String $optionName)
    
        Returns the option value associated with the default navigation during installation
        
        :param String $optionName: The option name for a stored navigation object.
        :returns: String The option value associated with the default navigation during installation. If no option is found for the option name, then it returns an empty string.

    .. php:method:: _normalizePageRecursive($page, $pageOptions = Array)
    
        Normalizes a page and its subpages so it can be added
        
        :param unknown $page: 
        :param unknown $pageOptions:  The options to set during normalization for every page and subpage
        :returns: Omeka_Navigation_Page_Uri|Zend_Navigation_Page_Mvc|null The normalized page

    .. php:method:: _convertZendToOmekaNavigationPageUri(Zend_Navigation_Page_Uri $page)
    
        Converts a Zend_Navigation_Page_Uri to an Omeka_Navigation_Page_Uri
        
        :param Zend_Navigation_Page_Uri $page: The page to convert
        :returns: Omeka_Navigation_Page_Uri The converted page

    .. php:method:: _conditionalReplaceValueInArray(array $array, string $childKey, string $targetKey, mixed $oldValue, mixed $newValue)
    
        Returns an nested associative array such that all array elements have replaced an key value to 
        a new key value only if it is equal to a specific old key value.
        
        :param array $array: The associative array
        :param string $childKey: The associative array
        :param string $targetKey: The target key whose value can be replaced
        :param mixed $oldValue: The old value of the element associated with the target key used to determine if the value should be changed
        :param mixed $newValue: The new value of the element associated with the target key
        :returns: array The replaced associative array